using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Diagnostics;

namespace OS2_Project {
    class Program {

        public static int[,] array_seq;
        public static int[,] array_para;

        static void Main(string[] args) {
            array_seq = getTheArray();
            array_para = getTheArray();

            // sequencial
            var s1 = Stopwatch.StartNew();
            solve_seq();
            s1.Stop();

            var s2 = Stopwatch.StartNew();
            //solve_para1();
            //solve_para2();
            //Task.Run(()=> solve_para1());
            //Task.Run(()=> solve_para2());
            s2.Stop();


            /*for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    Console.Write(array_seq[i, j]);
                }
                Console.WriteLine("");
            }
            Console.WriteLine("Sequential time: " + ((double)(s1.Elapsed.TotalMilliseconds * 1000000) /
                100000).ToString("0.00 ns"));*/
            Console.WriteLine("--------------------------------------");
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    Console.Write(array_para[i, j]);
                }
                Console.WriteLine("");
            }
            Console.WriteLine("Parallel time: " + ((double)(s2.Elapsed.TotalMilliseconds * 1000000) /
                100000).ToString("0.00 ns"));


        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        /* GENERAL */
        //////////////////////////////////////////
        //////////////////////////////////////////

        public static int[,] getTheArray() {
            String f_path = @"test.txt";
            string[] lines = File.ReadAllLines(f_path);
            int[,] input = new int[9 ,9];
            for (int i = 0; i < 9; i++) {
                for (int j = 0; j < 9; j++) {
                    if (lines[i][j] == '*') {
                        input[i, j] = 0;
                    }
                    else {
                        input[i, j] = (int)Char.GetNumericValue(lines[i][j]);
                    }
                }
            }
            return input;
        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        /* SEQUENTIAL */
        //////////////////////////////////////////
        //////////////////////////////////////////

        public static int [] findEmpty_seq() {
            for (int i = 0; i<9; i++) {
                for (int j = 0; j<9; j++) {
                    if (array_seq[i, j] == 0) {
                        int[] temp = {i, j};
                        return temp;
                    }
                }
            }
            int[] temp1 = {-1, -1};
            return temp1;
        }

        public static bool isValid_seq(int[] pos, int num) {
            // CHECK ROW
            for (int i = 0; i<9; i++) {
                if (array_seq[pos[0], i] == num && pos[1] != i) {
                    return false;
                }
            }

            // CHECK COL
            for (int i = 0; i<9; i++) {
                if (array_seq[i, pos[1]] == num && pos[0] != i) {
                    //Console.WriteLine("sss");
                    return false;
                }
            }

            // CHECK SEQ
            int box_x = pos[0] / 3;
            int box_y = pos[1] / 3;
            Console.WriteLine("X: " + box_x);
            Console.WriteLine("Y: " + box_y);
            for (int i = box_x*3; i<(box_x*3)+3; i++) {
                for (int j = box_y*3; j<(box_y*3)+3; j++) {
                    if (array_seq[i, j] == num && i != pos[0] && j != pos[1]) {
                        return false;
                    }
                }
            }
            return true;

        }

        public static bool solve_seq() {
            int[] temp = findEmpty_seq();
            Console.WriteLine(temp[0] + "   " + temp[1]);
            if (temp[0] == -1 && temp[1] == -1) {
                return true;
            }
            for (int i = 1; i<10; i++) {
                if (isValid_seq(temp, i)) {
                    array_seq[temp[0], temp[1]] = i;
                    for (int x = 0; x < 9; x++) {
                        for (int j = 0; j < 9; j++) {
                            Console.Write(array_seq[x, j]);
                        }
                        Console.WriteLine("");
                    }
                    if (solve_seq()) {
                        return true;

                    }
                    array_seq[temp[0], temp[1]] = 0;
                }
            }
            return false;
        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        /* parallel */
        //////////////////////////////////////////
        //////////////////////////////////////////

        public static bool isValid_para(int[] pos, int num) {
            // CHECK ROW
            for (int i = 0; i<9; i++) {
                if (array_para[pos[0], i] == num && pos[1] != i) {
                    return false;
                }
            }

            // CHECK COL
            for (int i = 0; i<9; i++) {
                if (array_para[i, pos[1]] == num && pos[0] != i) {
                    //Console.WriteLine("sss");
                    return false;
                }
            }

            // CHECK SEQ
            int box_x = pos[0] / 3;
            int box_y = pos[1] / 3;
            Console.WriteLine("X: " + box_x);
            Console.WriteLine("Y: " + box_y);
            for (int i = box_x*3; i<(box_x*3)+3; i++) {
                for (int j = box_y*3; j<(box_y*3)+3; j++) {
                    if (array_para[i, j] == num && i != pos[0] && j != pos[1]) {
                        return false;
                    }
                }
            }
            return true;

        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        /* parallel UP LEFT */
        //////////////////////////////////////////
        //////////////////////////////////////////

        public static int [] findEmpty_para1() {
            for (int i = 0; i<9; i++) {
                for (int j = 0; j<9; j++) {
                    if (array_para[i, j] == 0) {
                        int[] temp = {i, j};
                        return temp;
                    }
                }
            }
            int[] temp1 = {-1, -1};
            return temp1;
        }


        public static bool solve_para1() {
            int[] temp = findEmpty_para1();
            Console.WriteLine(temp[0] + "   " + temp[1]);
            if (temp[0] == -1 && temp[1] == -1) {
                return true;
            }
            for (int i = 1; i<10; i++) {
                if (isValid_para(temp, i)) {
                    array_para[temp[0], temp[1]] = i;
                    for (int x = 0; x < 9; x++) {
                        for (int j = 0; j < 9; j++) {
                            Console.Write(array_para[x, j]);
                        }
                        Console.WriteLine("");
                    }
                    if (solve_para1()) {
                        return true;

                    }
                    array_para[temp[0], temp[1]] = 0;
                }
            }
            return false;
        }

        //////////////////////////////////////////
        //////////////////////////////////////////
        /* parallel DOWN RIGHT */
        //////////////////////////////////////////
        //////////////////////////////////////////

        public static int [] findEmpty_para2() {
            for (int i = 8; i>=0; i--) {
                for (int j = 8; j>=0; j--) {
                    if (array_para[i, j] == 0) {
                        int[] temp = {i, j};
                        return temp;
                    }
                }
            }
            int[] temp1 = {-1, -1};
            return temp1;
        }

        public static bool solve_para2() {
            int[] temp = findEmpty_para2();
            Console.WriteLine(temp[0] + "   " + temp[1]);
            if (temp[0] == -1 && temp[1] == -1) {
                return true;
            }
            for (int i = 1; i<10; i++) {
                if (isValid_para(temp, i)) {
                    array_para[temp[0], temp[1]] = i;
                    for (int x = 0; x < 9; x++) {
                        for (int j = 0; j < 9; j++) {
                            Console.Write(array_para[x, j]);
                        }
                        Console.WriteLine("");
                    }
                    if (solve_para2()) {
                        return true;

                    }
                    array_para[temp[0], temp[1]] = 0;
                }
            }
            return false;
        }

    }

}
